# lab1:
# 1:修改顏色
# 2:修改terminal名稱 linux@virtualBox => linux@virtualBox-P77131142
# 3:修改符號 linux@virtualBox-P77131142:~$ => linux@virtualBox-P77131142:~#

# 開啟設定檔
nano ~/.bashrc
# 修改需求 \e[1;35m=開始亮粉色  \[\e[0m\]重置顏色
PS1='\[\e[1;35m\]\u@\h-P77131142\[\e[0m\]:\w# '


#lab2:

cd /path/to/Linux_Week5_Miniproject1   # 根目錄（script 要放在這裡）
ls
# 應看到 compressed_files/ 和 student_id



#inux_Week5_Miniproject1/template.sh:

#!/usr/bin/env bash
# ↑ 指定使用 bash 這個 shell 來執行腳本（不論系統安裝路徑在哪，用 env 幫你找到）

set -euo pipefail
# -e ：只要有任何一行指令出錯（回傳非 0 狀態碼），整個腳本立即停止
# -u ：如果用到未宣告的變數，立刻報錯停止（防止打錯變數名）
# -o pipefail ：當管線指令（a | b | c）中有任一失敗時，整條命令算失敗
# 👉 這三個一起開啟被稱為「嚴格模式」，能防止腳本靜靜錯掉卻沒發現

shopt -s nullglob
# nullglob：當你用 *.zip 這種萬用字元找檔案時，
# 如果沒有符合的檔案，不會傳回字串 "*.zip"，
# 而是直接視為「沒有結果」，避免誤判。

# -----------------------------------------------------------
# 取得腳本所在的目錄，並切換到那裡
ROOT_DIR="$(cd "$(dirname "$0")" && pwd)"
# $(dirname "$0") ：取得目前腳本檔案的所在資料夾
# cd "$(dirname "$0")" ：切換到那個資料夾
# pwd ：輸出目前路徑（print working directory）
# 所以整個意思是：「找到腳本本身所在的資料夾絕對路徑」
cd "$ROOT_DIR"
# 切換到腳本所在資料夾，確保所有路徑操作都是相對於腳本目錄

# -----------------------------------------------------------
# 建立輸出目錄與清單檔
mkdir -p zip rar "tar.gz" unknown uncompressed
# -p 參數：如果資料夾不存在就建立；存在則略過
# 上面建立五個資料夾用來放不同類型的壓縮檔與解壓後的檔案

: > missing_list
: > wrong_list
# 「:」 是 bash 的空指令（不做事但回傳成功）
# 「: > 檔名」 表示清空檔案內容或建立一個新的空白檔案
# 這裡建立 / 清空「缺交名單」與「格式錯誤名單」

# -----------------------------------------------------------
# [第1步] 分類壓縮檔案
# 來源資料夾為 compressed_files/

if [[ ! -d compressed_files ]]; then
  echo "Error: compressed_files/ not found in $ROOT_DIR" >&2
  # >&2 表示把錯誤訊息輸出到錯誤輸出管道（stderr）
  exit 1
  # 結束腳本並回傳錯誤碼 1
fi

echo "Classifying files..."
for f in compressed_files/*; do
  [[ -f "$f" ]] || continue
  # 檢查 f 是否是一般檔案，不是就跳過（例如資料夾）
  fname=$(basename "$f")
  # 取得純檔名（去掉前面的路徑）
  case "$fname" in
    *.zip)        mv -n -- "$f" zip/ ;;        # 副檔名是 .zip → 移到 zip/
    *.tar.gz|*.tgz) mv -n -- "$f" "tar.gz"/ ;; # 副檔名是 .tar.gz 或 .tgz → 移到 tar.gz/
    *.rar)        mv -n -- "$f" rar/ ;;        # 副檔名是 .rar → 移到 rar/
    *)            mv -n -- "$f" unknown/ ;;    # 其他 → 移到 unknown/
  esac
done
# -n ：若目標已存在相同檔名，不會覆蓋
# -- ：防止檔名以「-」開頭時被誤認為選項

# -----------------------------------------------------------
# [第2步] 檢查 student_id 清單，找出沒交或格式錯誤者
if [[ ! -f student_id ]]; then
  echo "Warning: student_id file not found; skipping missing/wrong check."
else
  echo "Checking student_id list..."
  while IFS= read -r id || [[ -n "$id" ]]; do
    # IFS= ：避免讀入行時自動依空白切割
    # -r ：不讓反斜線轉義字元生效
    # 這行意思：逐行讀取 student_id 檔案中的每個學號

    # 清理學號中的換行與空白
    id=$(echo "$id" | tr -d '\r\n' | xargs)
    [[ -z "$id" ]] && continue
    # 若行是空的就跳過

    found=0
    # 預設假設此學號沒找到交件

    # 在四個資料夾中尋找是否有以學號開頭的檔案
    for dir in zip "tar.gz" rar unknown; do
      if compgen -G "$dir/${id}*" > /dev/null; then
        # compgen -G 是比 ls 更安全的方式來判斷通配符是否有匹配
        # 若有找到匹配檔案，表示該學生有交件
        found=1
        if [[ "$dir" == "unknown" ]]; then
          # 如果他的檔案是在 unknown 資料夾 → 格式不對
          echo "$id" >> wrong_list
        fi
      fi
    done

    if [[ $found -eq 0 ]]; then
      # 沒在任何資料夾找到 → 沒交作業
      echo "$id" >> missing_list
    fi
  done < student_id
fi

# -----------------------------------------------------------
# [第3步] 解壓縮 zip 類型檔案
echo "Uncompressing zip files..."
for f in zip/*.zip; do
  [[ -e "$f" ]] || continue
  base=$(basename "$f")        # 取出純檔名
  id=${base%%.*}               # 從檔名中取出學號（刪掉第一個 '.' 之後的部分）
  target="uncompressed/$id"    # 設定解壓目標路徑
  mkdir -p "$target"           # 若該資料夾不存在則建立
  unzip -q "$f" -d "$target" || echo "unzip failed: $f" >&2
  # -q 安靜模式；-d 指定解壓目的資料夾
  # 若 unzip 失敗，輸出錯誤訊息到 stderr
done

# -----------------------------------------------------------
# [第4步] 解壓縮 tar.gz 檔案
echo "Uncompressing tar.gz files..."
for f in "tar.gz"/*.tar.gz "tar.gz"/*.tgz; do
  [[ -e "$f" ]] || continue
  base=$(basename "$f")
  id=${base%%.*}
  target="uncompressed/$id"
  mkdir -p "$target"
  tar -xzf "$f" -C "$target" || echo "tar failed: $f" >&2
  # -x 解壓；-z 代表 gzip；-f 指定檔案；-C 指定解壓目的資料夾
done

# -----------------------------------------------------------
# [第5步] 解壓縮 rar 檔案
echo "Uncompressing rar files..."
for f in rar/*.rar; do
  [[ -e "$f" ]] || continue
  base=$(basename "$f")
  id=${base%%.*}
  target="uncompressed/$id"
  mkdir -p "$target"
  unrar x -inul "$f" "$target" || echo "unrar failed: $f" >&2
  # unrar x ：解壓並建立目錄
  # -inul ：靜默模式（不顯示輸出）
done

# -----------------------------------------------------------
echo "Done. Check missing_list, wrong_list, and uncompressed/ directory."
# 最後顯示提示訊息，告訴你結果可以在哪些檔案/資料夾查看
